import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class parcDp {

	static BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
	static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

	public static void main(String[] args) throws IOException {
		int N = Integer.parseInt(bf.readLine());

		int[][] board = new int[N + 1][3];
		int[][] dp = new int[N + 1][3];
		for (int i = 1; i < N + 1; i++) {
			StringTokenizer st = new StringTokenizer(bf.readLine());
			for (int j = 0; j < 3; j++) {
				board[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		for(int i = 1; i < N + 1; i++) {
			dp[i][0] = Math.min(dp[i - 1][1], dp[i - 1][2]) + board[i][0];
			dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][2]) + board[i][1];
			dp[i][2] = Math.min(dp[i - 1][1], dp[i - 1][0]) + board[i][2];
		}
		
		int answer = Math.min(Math.min(dp[N][0], dp[N][1]), dp[N][2]);
		
		bw.write(String.valueOf(answer));
		bw.flush();
		bw.close();
		bf.close();
	}
}
